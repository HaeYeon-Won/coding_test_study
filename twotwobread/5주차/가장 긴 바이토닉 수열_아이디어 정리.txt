  { 처음 아이디어 }
=> LIS를 구하고 LDS를 구하면 바이토닉 수열이 될 수 밖에 없다.
=> 그리고 전체수열을 거꾸로 뒤집고 LIS를 구하고 LDS를 구한 값 두 개 중 최대 값이 정답이다.

10 0 20 30 40 30 20 10

---------------------------------------------------------------------------------

반례
19
1 10 2 3 4 5 6 7 8 9 8 7 6 5 4 3 2 10 1
<정답>
1 2 3 4 5 6 7 8 9 8 7 6 5 4 3 2 1

[ 처음 아이디어로 푸는 경우 ]
=> LIS, LDS 둘 중 하나로 치우치는 경우가 생겨버림. 

< LIS를 구하고 LDS를 구하는 경우 >
1 2 3 4 5 6 7 8 9 10 1 
< LDS를 구하고 LIS를 구하는 경우 >
1 10 9 8 7 6 5 4 3 2 1 

---------------------------------------------------------------------------------

  { 최종 도출된 아이디어}
=> 매자리 LIS가 몇개까지 가능한지 알아봐야한다.
=> 매자리 LDS가 몇개까지 가능한지 알아봐야한다.
=> 두개를 더해서 -1을 했을때, 가장 큰 값이 정답 -> -1은 LIS, LDS를 할 경우 한자리가 겹침.
					      [ 1 2 3 4 5 6 7 8 9 ] , [ 9 8 7 6 5 4 3 2 1 ]
=> 이를 위해선 DP를 사용하여야한다.

---------------------------------------------------------------------------------

- 기존 LIS를 구하는 방법 자체가 원래 DP로 풀이가 가능함. 하지만 시간이 굉장히 오래 걸려서 이분탐색을 추가하여 품.
- 그 뜻은 애초에 한자리 한자리 지나가면서 풀어야한다는 의미. 이분탐색은 lis의 위치를 찾아주는 기능만 담당.
- 그래서 이분탐색을 이용해서 한 자리씩 지나가면서 해당 자리에서 lis가 몇개인지, lds가 몇개인지 찾아야함.

